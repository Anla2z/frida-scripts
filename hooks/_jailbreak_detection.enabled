var jailbreakPaths = [
	"/etc/apt",
	"/Library/MobileSubstrate/MobileSubstrate.dylib",
	"/Applications/Cydia.app",
	"/Applications/blackra1n.app",
	"/Applications/FakeCarrier.app",
	"/Applications/Icy.app",
	"/Applications/IntelliScreen.app",
	"/Applications/MxTube.app",
	"/Applications/RockApp.app",
	"/Applications/SBSetttings.app",
	"/Applications/WinterBoard.app",
	"/usr/sbin/sshd",
	"/private/var/tmp/cydia.log",
	"/usr/binsshd",
	"/usr/libexec/sftp-server",
	"/Systetem/Library/LaunchDaemons/com.ikey.bbot.plist",
	"/System/Library/LaunchDaemons/com.saurik.Cy@dia.Startup.plist",
	"/Library/MobileSubstrate/MobileSubstrate.dylib",
	"/var/log/syslog",
	"/bin/bash",
	"/bin/sh",
	"/etc/ssh/sshd_config",
	"/usr/libexec/ssh-keysign"
        ];

if(ObjC.available) {
	send("Jailbreak Detection enabled");
	for(var className in ObjC.classes) {
	    if (ObjC.classes.hasOwnProperty(className)) {
		if(className == "NSFileManager") {
		    send("Found our target class : " + className);

				var hook = ObjC.classes.NSFileManager["- fileExistsAtPath:"];
				Interceptor.attach(hook.implementation, {
				onEnter: function (args) {
					var receiver = new ObjC.Object(args[0]); // NSFileManager
					send("Target class : " + receiver);

					var sel = ObjC.selectorAsString(args[1]);
					send("Target method : " + sel);

					var  path = ObjC.Object(args[2]).toString(); // NSString

					this.jailbreakCall = false;
					var i = jailbreakPaths.length;
					while (i--) {
					    if (jailbreakPaths[i] == path) {
								send("Jailbreak detection => Trying to read path: "+path);
								this.jailbreakCall = true;
					    }
					}
			  },
				onLeave: function (retval) {
					if(this.jailbreakCall) {
						retval.replace(0x0);
						send("Jailbreak detection bypassed!");
					}
				}
			});
		}
	    }
	}
} else {
	console.log("Objective-C Runtime is not available!");
}
